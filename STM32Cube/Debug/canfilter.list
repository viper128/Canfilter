
canfilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080026e8  080026e8  000036e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002738  08002738  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800273c  0800273c  0000373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002740  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800274c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800274c  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051b3  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001422  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  0000a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000403  00000000  00000000  0000ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a274  00000000  00000000  0000af93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000683d  00000000  00000000  00025207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009295b  00000000  00000000  0002ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be39f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014e0  00000000  00000000  000be3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000bf8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080026d0 	.word	0x080026d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080026d0 	.word	0x080026d0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b98c 	b.w	8000554 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	468e      	mov	lr, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d962      	bls.n	8000330 <__udivmoddi4+0xdc>
 800026a:	fab2 f682 	clz	r6, r2
 800026e:	b14e      	cbz	r6, 8000284 <__udivmoddi4+0x30>
 8000270:	f1c6 0320 	rsb	r3, r6, #32
 8000274:	fa01 f806 	lsl.w	r8, r1, r6
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	40b7      	lsls	r7, r6
 800027e:	ea43 0808 	orr.w	r8, r3, r8
 8000282:	40b4      	lsls	r4, r6
 8000284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fb0e 8811 	mls	r8, lr, r1, r8
 8000294:	fb01 f20c 	mul.w	r2, r1, ip
 8000298:	0c23      	lsrs	r3, r4, #16
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	429a      	cmp	r2, r3
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x62>
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a8:	f080 80eb 	bcs.w	8000482 <__udivmoddi4+0x22e>
 80002ac:	429a      	cmp	r2, r3
 80002ae:	f240 80e8 	bls.w	8000482 <__udivmoddi4+0x22e>
 80002b2:	3902      	subs	r1, #2
 80002b4:	443b      	add	r3, r7
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	fbb2 f0fe 	udiv	r0, r2, lr
 80002bc:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	459c      	cmp	ip, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d4:	f080 80d7 	bcs.w	8000486 <__udivmoddi4+0x232>
 80002d8:	459c      	cmp	ip, r3
 80002da:	f240 80d4 	bls.w	8000486 <__udivmoddi4+0x232>
 80002de:	443b      	add	r3, r7
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	eba3 030c 	sub.w	r3, r3, ip
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa2>
 80002ee:	2200      	movs	r2, #0
 80002f0:	40f3      	lsrs	r3, r6
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xb6>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb0>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa2>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x14c>
 8000312:	4573      	cmp	r3, lr
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xc8>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 8108 	bhi.w	800052c <__udivmoddi4+0x2d8>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000322:	2001      	movs	r0, #1
 8000324:	4690      	mov	r8, r2
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e5      	beq.n	80002f6 <__udivmoddi4+0xa2>
 800032a:	e9c5 4800 	strd	r4, r8, [r5]
 800032e:	e7e2      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000330:	2a00      	cmp	r2, #0
 8000332:	f000 8091 	beq.w	8000458 <__udivmoddi4+0x204>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	2e00      	cmp	r6, #0
 800033c:	f040 80a5 	bne.w	800048a <__udivmoddi4+0x236>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	2101      	movs	r1, #1
 8000344:	0c03      	lsrs	r3, r0, #16
 8000346:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034a:	b280      	uxth	r0, r0
 800034c:	b2bc      	uxth	r4, r7
 800034e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000352:	fb0e 221c 	mls	r2, lr, ip, r2
 8000356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035a:	fb04 f20c 	mul.w	r2, r4, ip
 800035e:	429a      	cmp	r2, r3
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x11e>
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x11c>
 800036a:	429a      	cmp	r2, r3
 800036c:	f200 80e3 	bhi.w	8000536 <__udivmoddi4+0x2e2>
 8000370:	46c4      	mov	ip, r8
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	fbb3 f2fe 	udiv	r2, r3, lr
 8000378:	fb0e 3312 	mls	r3, lr, r2, r3
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	429c      	cmp	r4, r3
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x144>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f102 30ff 	add.w	r0, r2, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x142>
 8000390:	429c      	cmp	r4, r3
 8000392:	f200 80cd 	bhi.w	8000530 <__udivmoddi4+0x2dc>
 8000396:	4602      	mov	r2, r0
 8000398:	1b1b      	subs	r3, r3, r4
 800039a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x98>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa2e fa06 	lsr.w	sl, lr, r6
 80003b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b4:	fbba f8f9 	udiv	r8, sl, r9
 80003b8:	fa0e fe01 	lsl.w	lr, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fb09 aa18 	mls	sl, r9, r8, sl
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea43 030e 	orr.w	r3, r3, lr
 80003cc:	fa00 fe01 	lsl.w	lr, r0, r1
 80003d0:	fb08 f00c 	mul.w	r0, r8, ip
 80003d4:	0c1c      	lsrs	r4, r3, #16
 80003d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003da:	42a0      	cmp	r0, r4
 80003dc:	fa02 f201 	lsl.w	r2, r2, r1
 80003e0:	d90a      	bls.n	80003f8 <__udivmoddi4+0x1a4>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 809e 	bcs.w	8000528 <__udivmoddi4+0x2d4>
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	f240 809b 	bls.w	8000528 <__udivmoddi4+0x2d4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	1a24      	subs	r4, r4, r0
 80003fa:	b298      	uxth	r0, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800040c:	45a4      	cmp	ip, r4
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f103 30ff 	add.w	r0, r3, #4294967295
 8000416:	f080 8085 	bcs.w	8000524 <__udivmoddi4+0x2d0>
 800041a:	45a4      	cmp	ip, r4
 800041c:	f240 8082 	bls.w	8000524 <__udivmoddi4+0x2d0>
 8000420:	3b02      	subs	r3, #2
 8000422:	443c      	add	r4, r7
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	eba4 040c 	sub.w	r4, r4, ip
 800042c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000430:	4564      	cmp	r4, ip
 8000432:	4643      	mov	r3, r8
 8000434:	46e1      	mov	r9, ip
 8000436:	d364      	bcc.n	8000502 <__udivmoddi4+0x2ae>
 8000438:	d061      	beq.n	80004fe <__udivmoddi4+0x2aa>
 800043a:	b15d      	cbz	r5, 8000454 <__udivmoddi4+0x200>
 800043c:	ebbe 0203 	subs.w	r2, lr, r3
 8000440:	eb64 0409 	sbc.w	r4, r4, r9
 8000444:	fa04 f606 	lsl.w	r6, r4, r6
 8000448:	fa22 f301 	lsr.w	r3, r2, r1
 800044c:	431e      	orrs	r6, r3
 800044e:	40cc      	lsrs	r4, r1
 8000450:	e9c5 6400 	strd	r6, r4, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	e74e      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000458:	fbb1 fcf2 	udiv	ip, r1, r2
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000462:	b280      	uxth	r0, r0
 8000464:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000468:	463b      	mov	r3, r7
 800046a:	fbb1 f1f7 	udiv	r1, r1, r7
 800046e:	4638      	mov	r0, r7
 8000470:	463c      	mov	r4, r7
 8000472:	46b8      	mov	r8, r7
 8000474:	46be      	mov	lr, r7
 8000476:	2620      	movs	r6, #32
 8000478:	eba2 0208 	sub.w	r2, r2, r8
 800047c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000480:	e765      	b.n	800034e <__udivmoddi4+0xfa>
 8000482:	4601      	mov	r1, r0
 8000484:	e717      	b.n	80002b6 <__udivmoddi4+0x62>
 8000486:	4610      	mov	r0, r2
 8000488:	e72b      	b.n	80002e2 <__udivmoddi4+0x8e>
 800048a:	f1c6 0120 	rsb	r1, r6, #32
 800048e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000492:	40b7      	lsls	r7, r6
 8000494:	fa0e fe06 	lsl.w	lr, lr, r6
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	ea41 010e 	orr.w	r1, r1, lr
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fbbc f8fe 	udiv	r8, ip, lr
 80004a8:	b2bc      	uxth	r4, r7
 80004aa:	fb0e cc18 	mls	ip, lr, r8, ip
 80004ae:	fb08 f904 	mul.w	r9, r8, r4
 80004b2:	0c0a      	lsrs	r2, r1, #16
 80004b4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80004b8:	40b0      	lsls	r0, r6
 80004ba:	4591      	cmp	r9, r2
 80004bc:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c0:	b280      	uxth	r0, r0
 80004c2:	d93e      	bls.n	8000542 <__udivmoddi4+0x2ee>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f108 3cff 	add.w	ip, r8, #4294967295
 80004ca:	d201      	bcs.n	80004d0 <__udivmoddi4+0x27c>
 80004cc:	4591      	cmp	r9, r2
 80004ce:	d81f      	bhi.n	8000510 <__udivmoddi4+0x2bc>
 80004d0:	eba2 0209 	sub.w	r2, r2, r9
 80004d4:	fbb2 f9fe 	udiv	r9, r2, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80004e0:	b28a      	uxth	r2, r1
 80004e2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80004e6:	4542      	cmp	r2, r8
 80004e8:	d229      	bcs.n	800053e <__udivmoddi4+0x2ea>
 80004ea:	18ba      	adds	r2, r7, r2
 80004ec:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f0:	d2c2      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f2:	4542      	cmp	r2, r8
 80004f4:	d2c0      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f6:	f1a9 0102 	sub.w	r1, r9, #2
 80004fa:	443a      	add	r2, r7
 80004fc:	e7bc      	b.n	8000478 <__udivmoddi4+0x224>
 80004fe:	45c6      	cmp	lr, r8
 8000500:	d29b      	bcs.n	800043a <__udivmoddi4+0x1e6>
 8000502:	ebb8 0302 	subs.w	r3, r8, r2
 8000506:	eb6c 0c07 	sbc.w	ip, ip, r7
 800050a:	3801      	subs	r0, #1
 800050c:	46e1      	mov	r9, ip
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e6>
 8000510:	eba7 0909 	sub.w	r9, r7, r9
 8000514:	444a      	add	r2, r9
 8000516:	fbb2 f9fe 	udiv	r9, r2, lr
 800051a:	f1a8 0c02 	sub.w	ip, r8, #2
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7db      	b.n	80004dc <__udivmoddi4+0x288>
 8000524:	4603      	mov	r3, r0
 8000526:	e77d      	b.n	8000424 <__udivmoddi4+0x1d0>
 8000528:	46d0      	mov	r8, sl
 800052a:	e765      	b.n	80003f8 <__udivmoddi4+0x1a4>
 800052c:	4608      	mov	r0, r1
 800052e:	e6fa      	b.n	8000326 <__udivmoddi4+0xd2>
 8000530:	443b      	add	r3, r7
 8000532:	3a02      	subs	r2, #2
 8000534:	e730      	b.n	8000398 <__udivmoddi4+0x144>
 8000536:	f1ac 0c02 	sub.w	ip, ip, #2
 800053a:	443b      	add	r3, r7
 800053c:	e719      	b.n	8000372 <__udivmoddi4+0x11e>
 800053e:	4649      	mov	r1, r9
 8000540:	e79a      	b.n	8000478 <__udivmoddi4+0x224>
 8000542:	eba2 0209 	sub.w	r2, r2, r9
 8000546:	fbb2 f9fe 	udiv	r9, r2, lr
 800054a:	46c4      	mov	ip, r8
 800054c:	fb09 f804 	mul.w	r8, r9, r4
 8000550:	e7c4      	b.n	80004dc <__udivmoddi4+0x288>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <is_blocked_can1_to_can2>:

// Block list for CAN1 -> CAN2 (do not include ids that need to be modified) From CAR TO SYNC
const uint16_t blocklist_can1_to_can2[] = {0x998, 0x999}; // Example IDs
const size_t blocklist_can1_to_can2_count = sizeof(blocklist_can1_to_can2)/sizeof(blocklist_can1_to_can2[0]);

int is_blocked_can1_to_can2(uint16_t id) {
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
    for (size_t i = 0; i < blocklist_can1_to_can2_count; ++i) {
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e00b      	b.n	8000580 <is_blocked_can1_to_can2+0x28>
        if (blocklist_can1_to_can2[i] == id) {
 8000568:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <is_blocked_can1_to_can2+0x3c>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	429a      	cmp	r2, r3
 8000574:	d101      	bne.n	800057a <is_blocked_can1_to_can2+0x22>
            return 1;
 8000576:	2301      	movs	r3, #1
 8000578:	e007      	b.n	800058a <is_blocked_can1_to_can2+0x32>
    for (size_t i = 0; i < blocklist_can1_to_can2_count; ++i) {
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	2202      	movs	r2, #2
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4293      	cmp	r3, r2
 8000586:	d3ef      	bcc.n	8000568 <is_blocked_can1_to_can2+0x10>
        }
    }
    return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	08002718 	.word	0x08002718

08000598 <is_blocked_can2_to_can1>:

// Block list for CAN2 -> CAN1 (do not include ids that need to be modified) From SYNC TO CAR
const uint16_t blocklist_can2_to_can1[] = {0x998, 0x999}; // Example IDs
const size_t blocklist_can2_to_can1_count = sizeof(blocklist_can2_to_can1)/sizeof(blocklist_can2_to_can1[0]);

int is_blocked_can2_to_can1(uint16_t id) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
    for (size_t i = 0; i < blocklist_can2_to_can1_count; ++i) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e00b      	b.n	80005c0 <is_blocked_can2_to_can1+0x28>
        if (blocklist_can2_to_can1[i] == id) {
 80005a8:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <is_blocked_can2_to_can1+0x3c>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b0:	88fa      	ldrh	r2, [r7, #6]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d101      	bne.n	80005ba <is_blocked_can2_to_can1+0x22>
            return 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e007      	b.n	80005ca <is_blocked_can2_to_can1+0x32>
    for (size_t i = 0; i < blocklist_can2_to_can1_count; ++i) {
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	2202      	movs	r2, #2
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d3ef      	bcc.n	80005a8 <is_blocked_can2_to_can1+0x10>
        }
    }
    return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	0800271c 	.word	0x0800271c

080005d8 <canloop>:
void sendACCstate(CAN_HandleTypeDef *can2);
void sendIGNstate(CAN_HandleTypeDef *can2);
void sendGear(CAN_HandleTypeDef *can2);
/* USER CODE END PFP */

void canloop(CAN_HandleTypeDef *can1, CAN_HandleTypeDef *can2) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
    while (1) {
        // Receive Message from Can1 & send to CAN2:
        if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 80005e2:	2100      	movs	r1, #0
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f001 f88d 	bl	8001704 <HAL_CAN_GetRxFifoFillLevel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f8      	beq.n	80005e2 <canloop+0xa>
            if (HAL_CAN_GetRxMessage(can1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005f0:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <canloop+0xe0>)
 80005f2:	4a32      	ldr	r2, [pc, #200]	@ (80006bc <canloop+0xe4>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 ff73 	bl	80014e2 <HAL_CAN_GetRxMessage>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <canloop+0x2e>
                /* Reception Error */
                Error_Handler();
 8000602:	f000 fb1b 	bl	8000c3c <Error_Handler>
            }
	    // ID check goes here:
            if (!is_blocked_can1_to_can2(RxHeader.StdId)) {
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <canloop+0xe4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	b29b      	uxth	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffa3 	bl	8000558 <is_blocked_can1_to_can2>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d117      	bne.n	8000648 <canloop+0x70>
            	copyData(can1, can2); // From CAN1 to CAN2
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f856 	bl	80006cc <copyData>
                if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 8000620:	6838      	ldr	r0, [r7, #0]
 8000622:	f000 ff2a 	bl	800147a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00d      	beq.n	8000648 <canloop+0x70>
                    if (HAL_CAN_AddTxMessage(can2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <canloop+0xe8>)
 800062e:	4a25      	ldr	r2, [pc, #148]	@ (80006c4 <canloop+0xec>)
 8000630:	4925      	ldr	r1, [pc, #148]	@ (80006c8 <canloop+0xf0>)
 8000632:	6838      	ldr	r0, [r7, #0]
 8000634:	f000 fe47 	bl	80012c6 <HAL_CAN_AddTxMessage>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d004      	beq.n	8000648 <canloop+0x70>
                        // Transmission Error
                        HAL_CAN_ResetError(can2);
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f001 f887 	bl	8001752 <HAL_CAN_ResetError>
                        Error_Handler();
 8000644:	f000 fafa 	bl	8000c3c <Error_Handler>
                    }
            }
        }
        // Do same on Can2:
        if (HAL_CAN_GetRxFifoFillLevel(can2, CAN_RX_FIFO1) != 0) {
 8000648:	2101      	movs	r1, #1
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f001 f85a 	bl	8001704 <HAL_CAN_GetRxFifoFillLevel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0c5      	beq.n	80005e2 <canloop+0xa>
            if (HAL_CAN_GetRxMessage(can2, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) {
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <canloop+0xe0>)
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <canloop+0xe4>)
 800065a:	2101      	movs	r1, #1
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f000 ff40 	bl	80014e2 <HAL_CAN_GetRxMessage>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <canloop+0x94>
                /* Reception Error */
                Error_Handler();
 8000668:	f000 fae8 	bl	8000c3c <Error_Handler>
            }
            // ID check goes here:
            if (!is_blocked_can2_to_can1(RxHeader.StdId)) {
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <canloop+0xe4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff90 	bl	8000598 <is_blocked_can2_to_can1>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d117      	bne.n	80006ae <canloop+0xd6>
            	copyData(can2, can1); // From CAN2 to CAN1
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f000 f823 	bl	80006cc <copyData>
                if (HAL_CAN_GetTxMailboxesFreeLevel(can1) != 0) {
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 fef7 	bl	800147a <HAL_CAN_GetTxMailboxesFreeLevel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00d      	beq.n	80006ae <canloop+0xd6>
                    if (HAL_CAN_AddTxMessage(can1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <canloop+0xe8>)
 8000694:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <canloop+0xec>)
 8000696:	490c      	ldr	r1, [pc, #48]	@ (80006c8 <canloop+0xf0>)
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fe14 	bl	80012c6 <HAL_CAN_AddTxMessage>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d004      	beq.n	80006ae <canloop+0xd6>
                        // Transmission Error
                        HAL_CAN_ResetError(can1);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f001 f854 	bl	8001752 <HAL_CAN_ResetError>
                        Error_Handler();
 80006aa:	f000 fac7 	bl	8000c3c <Error_Handler>
                    }
            }
        }
        HAL_Delay(1); // Prevent 100% CPU usage
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fca6 	bl	8001000 <HAL_Delay>
        if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 80006b4:	e795      	b.n	80005e2 <canloop+0xa>
 80006b6:	bf00      	nop
 80006b8:	20000068 	.word	0x20000068
 80006bc:	2000004c 	.word	0x2000004c
 80006c0:	20000048 	.word	0x20000048
 80006c4:	20000040 	.word	0x20000040
 80006c8:	20000028 	.word	0x20000028

080006cc <copyData>:
        }
     }
   }
}

void copyData(CAN_HandleTypeDef *can1, CAN_HandleTypeDef *can2) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    memcpy(TxData, RxData, 8);
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <copyData+0x4c>)
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <copyData+0x50>)
 80006da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006de:	e883 0003 	stmia.w	r3, {r0, r1}
    TxHeader.DLC = RxHeader.DLC;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <copyData+0x54>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <copyData+0x58>)
 80006e8:	6113      	str	r3, [r2, #16]
    TxHeader.StdId = RxHeader.StdId;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <copyData+0x54>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <copyData+0x58>)
 80006f0:	6013      	str	r3, [r2, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <copyData+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <copyData+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
    filtercan(RxHeader.StdId, TxData, can1, can2);
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <copyData+0x54>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4903      	ldr	r1, [pc, #12]	@ (8000718 <copyData+0x4c>)
 800070a:	f000 f80d 	bl	8000728 <filtercan>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000040 	.word	0x20000040
 800071c:	20000068 	.word	0x20000068
 8000720:	2000004c 	.word	0x2000004c
 8000724:	20000028 	.word	0x20000028

08000728 <filtercan>:

void filtercan(int airbid, uint8_t data[8], CAN_HandleTypeDef *can1, CAN_HandleTypeDef *can2) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
    if (airbid == 0x3E9) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800073c:	4293      	cmp	r3, r2
 800073e:	d143      	bne.n	80007c8 <filtercan+0xa0>
	//Gear Position
        uint8_t d0 = data[0];
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	757b      	strb	r3, [r7, #21]
        gear = (d0 >> 4) & 0x0F; // Upper nibble
 8000746:	7d7b      	ldrb	r3, [r7, #21]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <filtercan+0xd0>)
 800074e:	701a      	strb	r2, [r3, #0]
	if(gear > 3) gear = 0;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <filtercan+0xd0>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d902      	bls.n	800075e <filtercan+0x36>
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <filtercan+0xd0>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        switch (gear) {
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <filtercan+0xd0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d826      	bhi.n	80007b4 <filtercan+0x8c>
 8000766:	a201      	add	r2, pc, #4	@ (adr r2, 800076c <filtercan+0x44>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800077d 	.word	0x0800077d
 8000770:	0800078b 	.word	0x0800078b
 8000774:	08000799 	.word	0x08000799
 8000778:	080007a7 	.word	0x080007a7
            case 0:
                msg023b4 = 0x61;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <filtercan+0xd4>)
 800077e:	2261      	movs	r2, #97	@ 0x61
 8000780:	701a      	strb	r2, [r3, #0]
                msg023b7 = 0x08;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <filtercan+0xd8>)
 8000784:	2208      	movs	r2, #8
 8000786:	701a      	strb	r2, [r3, #0]
                break;
 8000788:	e01b      	b.n	80007c2 <filtercan+0x9a>
            case 1:
                msg023b4 = 0x63;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <filtercan+0xd4>)
 800078c:	2263      	movs	r2, #99	@ 0x63
 800078e:	701a      	strb	r2, [r3, #0]
                msg023b7 = 0x09;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <filtercan+0xd8>)
 8000792:	2209      	movs	r2, #9
 8000794:	701a      	strb	r2, [r3, #0]
                break;
 8000796:	e014      	b.n	80007c2 <filtercan+0x9a>
            case 2:
                msg023b4 = 0x65;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <filtercan+0xd4>)
 800079a:	2265      	movs	r2, #101	@ 0x65
 800079c:	701a      	strb	r2, [r3, #0]
                msg023b7 = 0x0a;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <filtercan+0xd8>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	701a      	strb	r2, [r3, #0]
                break;
 80007a4:	e00d      	b.n	80007c2 <filtercan+0x9a>
            case 3:
                msg023b4 = 0x67;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <filtercan+0xd4>)
 80007a8:	2267      	movs	r2, #103	@ 0x67
 80007aa:	701a      	strb	r2, [r3, #0]
                msg023b7 = 0x0b;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <filtercan+0xd8>)
 80007ae:	220b      	movs	r2, #11
 80007b0:	701a      	strb	r2, [r3, #0]
                break;
 80007b2:	e006      	b.n	80007c2 <filtercan+0x9a>
            default:
                msg023b4 = 0x61;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <filtercan+0xd4>)
 80007b6:	2261      	movs	r2, #97	@ 0x61
 80007b8:	701a      	strb	r2, [r3, #0]
                msg023b7 = 0x08;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <filtercan+0xd8>)
 80007bc:	2208      	movs	r2, #8
 80007be:	701a      	strb	r2, [r3, #0]
                break;
 80007c0:	bf00      	nop
        }
        sendGear(can2);
 80007c2:	6838      	ldr	r0, [r7, #0]
 80007c4:	f000 f886 	bl	80008d4 <sendGear>
    }
    if (airbid == 0x353) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f240 3253 	movw	r2, #851	@ 0x353
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d10e      	bne.n	80007f0 <filtercan+0xc8>
	//Temperature Corection Code
        // Add 30 to data[4], handle overflow
        uint16_t val = (uint16_t)data[4] + 30;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	3304      	adds	r3, #4
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	331e      	adds	r3, #30
 80007da:	82fb      	strh	r3, [r7, #22]
        if (val > 0xFF) val = 0xFF; // Clamp to 255 if overflow
 80007dc:	8afb      	ldrh	r3, [r7, #22]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d901      	bls.n	80007e6 <filtercan+0xbe>
 80007e2:	23ff      	movs	r3, #255	@ 0xff
 80007e4:	82fb      	strh	r3, [r7, #22]
        data[4] = (uint8_t)val;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	3304      	adds	r3, #4
 80007ea:	8afa      	ldrh	r2, [r7, #22]
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
    }
    if (airbid == 0x545) {
        // Placeholder for future processing
    }
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000070 	.word	0x20000070
 80007fc:	20000071 	.word	0x20000071
 8000800:	20000072 	.word	0x20000072

08000804 <sendACCstate>:

void sendACCstate(CAN_HandleTypeDef *can2) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	@ 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8] = {0xa4, 0xc3, 0x83, 0x3a, 0x04, 0x81, 0x00, 0x00};
 800080c:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <sendACCstate+0x64>)
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000816:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t txMailbox;

    txHeader.StdId = 0x310;           // Set CAN ID to 0x310
 800081a:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800081e:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0x00;            // Not used for standard ID
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;        // Use standard identifier
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;                 // 8 data bytes
 800082c:	2308      	movs	r3, #8
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE; // Optional, depending on HAL version
 8000830:	2300      	movs	r3, #0
 8000832:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 fe1f 	bl	800147a <HAL_CAN_GetTxMailboxesFreeLevel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00e      	beq.n	8000860 <sendACCstate+0x5c>
        if (HAL_CAN_AddTxMessage(can2, &txHeader, txData, &txMailbox) != HAL_OK) {
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	f107 0210 	add.w	r2, r7, #16
 800084a:	f107 0118 	add.w	r1, r7, #24
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 fd39 	bl	80012c6 <HAL_CAN_AddTxMessage>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <sendACCstate+0x5c>
            // Handle transmission error
            HAL_CAN_ResetError(can2);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 ff79 	bl	8001752 <HAL_CAN_ResetError>
            // Optionally call Error_Handler();
        }
    }
}
 8000860:	bf00      	nop
 8000862:	3730      	adds	r7, #48	@ 0x30
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	080026e8 	.word	0x080026e8

0800086c <sendIGNstate>:

void sendIGNstate(CAN_HandleTypeDef *can2) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8] = {0xa6, 0xc3, 0x13, 0x40, 0x06, 0xc1, 0x00, 0x00};
 8000874:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <sendIGNstate+0x64>)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t txMailbox;

    txHeader.StdId = 0x310;           // Set CAN ID to 0x310
 8000882:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8000886:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0x00;            // Not used for standard ID
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;        // Use standard identifier
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;                 // 8 data bytes
 8000894:	2308      	movs	r3, #8
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE; // Optional, depending on HAL version
 8000898:	2300      	movs	r3, #0
 800089a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fdeb 	bl	800147a <HAL_CAN_GetTxMailboxesFreeLevel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00e      	beq.n	80008c8 <sendIGNstate+0x5c>
        if (HAL_CAN_AddTxMessage(can2, &txHeader, txData, &txMailbox) != HAL_OK) {
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	f107 0210 	add.w	r2, r7, #16
 80008b2:	f107 0118 	add.w	r1, r7, #24
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 fd05 	bl	80012c6 <HAL_CAN_AddTxMessage>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <sendIGNstate+0x5c>
            // Handle transmission error
            HAL_CAN_ResetError(can2);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 ff45 	bl	8001752 <HAL_CAN_ResetError>
            // Optionally call Error_Handler();
        }
    }
}
 80008c8:	bf00      	nop
 80008ca:	3730      	adds	r7, #48	@ 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	080026f0 	.word	0x080026f0

080008d4 <sendGear>:

void sendGear(CAN_HandleTypeDef *can2) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8] = {0x01, 0x00, 0x03, 0x30, msg023b4, 0x10, 0x4A, msg023b7};
 80008dc:	2301      	movs	r3, #1
 80008de:	743b      	strb	r3, [r7, #16]
 80008e0:	2300      	movs	r3, #0
 80008e2:	747b      	strb	r3, [r7, #17]
 80008e4:	2303      	movs	r3, #3
 80008e6:	74bb      	strb	r3, [r7, #18]
 80008e8:	2330      	movs	r3, #48	@ 0x30
 80008ea:	74fb      	strb	r3, [r7, #19]
 80008ec:	4b17      	ldr	r3, [pc, #92]	@ (800094c <sendGear+0x78>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	753b      	strb	r3, [r7, #20]
 80008f2:	2310      	movs	r3, #16
 80008f4:	757b      	strb	r3, [r7, #21]
 80008f6:	234a      	movs	r3, #74	@ 0x4a
 80008f8:	75bb      	strb	r3, [r7, #22]
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <sendGear+0x7c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	75fb      	strb	r3, [r7, #23]
    uint32_t txMailbox;

    txHeader.StdId = 0x023;            // Set CAN ID to 0x023
 8000900:	2323      	movs	r3, #35	@ 0x23
 8000902:	61bb      	str	r3, [r7, #24]
    txHeader.ExtId = 0x00;            // Not used for standard ID
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;        // Use standard identifier
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
    txHeader.RTR = CAN_RTR_DATA;      // Data frame
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;                 // 8 data bytes
 8000910:	2308      	movs	r3, #8
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TransmitGlobalTime = DISABLE; // Optional, depending on HAL version
 8000914:	2300      	movs	r3, #0
 8000916:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fdad 	bl	800147a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00e      	beq.n	8000944 <sendGear+0x70>
        if (HAL_CAN_AddTxMessage(can2, &txHeader, txData, &txMailbox) != HAL_OK) {
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	f107 0210 	add.w	r2, r7, #16
 800092e:	f107 0118 	add.w	r1, r7, #24
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 fcc7 	bl	80012c6 <HAL_CAN_AddTxMessage>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <sendGear+0x70>
            // Handle transmission error
            HAL_CAN_ResetError(can2);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 ff07 	bl	8001752 <HAL_CAN_ResetError>
            // Optionally call Error_Handler();
        }
    }
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	@ 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000071 	.word	0x20000071
 8000950:	20000072 	.word	0x20000072

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 faef 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f845 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f913 	bl	8000b8c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000966:	f000 f895 	bl	8000a94 <MX_CAN1_Init>
  MX_CAN2_Init();
 800096a:	f000 f8cd 	bl	8000b08 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
	canloop(&hcan1, &hcan2);
 800096e:	491b      	ldr	r1, [pc, #108]	@ (80009dc <main+0x88>)
 8000970:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <main+0x8c>)
 8000972:	f7ff fe31 	bl	80005d8 <canloop>

	uint32_t last_send = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]

	while (1)
	{
	    canloop(&hcan1, &hcan2);
 800097a:	4918      	ldr	r1, [pc, #96]	@ (80009dc <main+0x88>)
 800097c:	4818      	ldr	r0, [pc, #96]	@ (80009e0 <main+0x8c>)
 800097e:	f7ff fe2b 	bl	80005d8 <canloop>

    	    // Read pin states
   	    GPIO_PinState pa15_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000986:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <main+0x90>)
 8000988:	f001 f96e 	bl	8001c68 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	70fb      	strb	r3, [r7, #3]
	    GPIO_PinState pc10_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10);
 8000990:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000994:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <main+0x94>)
 8000996:	f001 f967 	bl	8001c68 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	70bb      	strb	r3, [r7, #2]

 	// Only process every 100 ms
		if (HAL_GetTick() - last_send >= 100)
 800099e:	f000 fb25 	bl	8000fec <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	2b63      	cmp	r3, #99	@ 0x63
 80009aa:	d9e6      	bls.n	800097a <main+0x26>
    		{
	        	if (pa15_state == GPIO_PIN_RESET && pc10_state == GPIO_PIN_RESET)
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d109      	bne.n	80009c6 <main+0x72>
 80009b2:	78bb      	ldrb	r3, [r7, #2]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d106      	bne.n	80009c6 <main+0x72>
	        	{
		            // Both PA15 and PC10 are low: send IGNstate (priority)
		            sendIGNstate(&hcan2);
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <main+0x88>)
 80009ba:	f7ff ff57 	bl	800086c <sendIGNstate>
	 	           last_send = HAL_GetTick();
 80009be:	f000 fb15 	bl	8000fec <HAL_GetTick>
 80009c2:	6078      	str	r0, [r7, #4]
	        	{
 80009c4:	e008      	b.n	80009d8 <main+0x84>
	  	        }
	       		 else if (pa15_state == GPIO_PIN_RESET)
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1d6      	bne.n	800097a <main+0x26>
	 	       {
	        	    // Only PA15 is low: send ACCstate
	          	  sendACCstate(&hcan2);
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <main+0x88>)
 80009ce:	f7ff ff19 	bl	8000804 <sendACCstate>
			  last_send = HAL_GetTick();
 80009d2:	f000 fb0b 	bl	8000fec <HAL_GetTick>
 80009d6:	6078      	str	r0, [r7, #4]
	{
 80009d8:	e7cf      	b.n	800097a <main+0x26>
 80009da:	bf00      	nop
 80009dc:	2000009c 	.word	0x2000009c
 80009e0:	20000074 	.word	0x20000074
 80009e4:	40010800 	.word	0x40010800
 80009e8:	40011000 	.word	0x40011000

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2238      	movs	r2, #56	@ 0x38
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fe60 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a30:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000a36:	2302      	movs	r3, #2
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000a3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f93d 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a54:	f000 f8f2 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fc3e 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a7e:	f000 f8dd 	bl	8000c3c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000a82:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <SystemClock_Config+0xa4>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	@ 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	42420070 	.word	0x42420070

08000a94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <MX_CAN1_Init+0x70>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ab4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000ab8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000abc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ac0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_CAN1_Init+0x6c>)
 8000ae8:	f000 faae 	bl	8001048 <HAL_CAN_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000af2:	f000 f8a3 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000074 	.word	0x20000074
 8000b04:	40006400 	.word	0x40006400

08000b08 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b10:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <MX_CAN2_Init+0x80>)
 8000b12:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b16:	2206      	movs	r2, #6
 8000b18:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b28:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b2c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b30:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b34:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b5a:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b5c:	f000 fa74 	bl	8001048 <HAL_CAN_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000b66:	f000 f869 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_CAN2_Init+0x7c>)
 8000b6c:	f000 fb67 	bl	800123e <HAL_CAN_Start>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_CAN2_Init+0x72>
		/* Start Error */
		Error_Handler();
 8000b76:	f000 f861 	bl	8000c3c <Error_Handler>
	}
  /* USER CODE END CAN2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000009c 	.word	0x2000009c
 8000b88:	40006800 	.word	0x40006800

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_GPIO_Init+0xa8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_GPIO_Init+0xac>)
 8000c08:	f001 f845 	bl	8001c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_GPIO_Init+0xac>)
 8000c26:	f000 fe9b 	bl	8001960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40011000 	.word	0x40011000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	//HAL_Delay(300);
	/* USER CODE BEGIN 3 */
	//}
  /* USER CODE END Error_Handler_Debug */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x60>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f000 fe3a 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x64>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_MspInit+0x64>)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000

08000cb0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a4d      	ldr	r2, [pc, #308]	@ (8000e00 <HAL_CAN_MspInit+0x150>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13b      	bne.n	8000d48 <HAL_CAN_MspInit+0x98>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a4b      	ldr	r2, [pc, #300]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000cd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cda:	4b4a      	ldr	r3, [pc, #296]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10b      	bne.n	8000cfa <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce2:	4b49      	ldr	r3, [pc, #292]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a48      	ldr	r2, [pc, #288]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000ce8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b46      	ldr	r3, [pc, #280]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a42      	ldr	r2, [pc, #264]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b40      	ldr	r3, [pc, #256]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4839      	ldr	r0, [pc, #228]	@ (8000e0c <HAL_CAN_MspInit+0x15c>)
 8000d28:	f000 fe1a 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4832      	ldr	r0, [pc, #200]	@ (8000e0c <HAL_CAN_MspInit+0x15c>)
 8000d42:	f000 fe0d 	bl	8001960 <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d46:	e057      	b.n	8000df8 <HAL_CAN_MspInit+0x148>
  else if(hcan->Instance==CAN2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a30      	ldr	r2, [pc, #192]	@ (8000e10 <HAL_CAN_MspInit+0x160>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d152      	bne.n	8000df8 <HAL_CAN_MspInit+0x148>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a2c      	ldr	r2, [pc, #176]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a24      	ldr	r2, [pc, #144]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000d72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <HAL_CAN_MspInit+0x154>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10b      	bne.n	8000d94 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	61d3      	str	r3, [r2, #28]
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_CAN_MspInit+0x158>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dac:	2320      	movs	r3, #32
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4815      	ldr	r0, [pc, #84]	@ (8000e14 <HAL_CAN_MspInit+0x164>)
 8000dc0:	f000 fdce 	bl	8001960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc4:	2340      	movs	r3, #64	@ 0x40
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <HAL_CAN_MspInit+0x164>)
 8000dd8:	f000 fdc2 	bl	8001960 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_CAN_MspInit+0x168>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <HAL_CAN_MspInit+0x168>)
 8000df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df6:	6053      	str	r3, [r2, #4]
}
 8000df8:	bf00      	nop
 8000dfa:	3730      	adds	r7, #48	@ 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40006400 	.word	0x40006400
 8000e04:	200000c4 	.word	0x200000c4
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40006800 	.word	0x40006800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010000 	.word	0x40010000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8aa 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <SystemInit+0x70>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <SystemInit+0x70>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <SystemInit+0x70>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4916      	ldr	r1, [pc, #88]	@ (8000ee8 <SystemInit+0x70>)
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <SystemInit+0x74>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <SystemInit+0x70>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a13      	ldr	r2, [pc, #76]	@ (8000ee8 <SystemInit+0x70>)
 8000e9a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <SystemInit+0x70>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <SystemInit+0x70>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <SystemInit+0x70>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <SystemInit+0x70>)
 8000eb6:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000eba:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <SystemInit+0x70>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <SystemInit+0x70>)
 8000ec2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <SystemInit+0x70>)
 8000eca:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000ece:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SystemInit+0x70>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <SystemInit+0x78>)
 8000ed8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000edc:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	f0ff0000 	.word	0xf0ff0000
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ef4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
  ldr r2, =_sbss
 8000f0a:	4a09      	ldr	r2, [pc, #36]	@ (8000f30 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1a:	f7ff ffad 	bl	8000e78 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff fd19 	bl	8000954 <main>
  bx lr
 8000f22:	4770      	bx	lr
  ldr r3, =_sidata
 8000f24:	08002740 	.word	0x08002740
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f30:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f34:	200000cc 	.word	0x200000cc

08000f38 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_Init+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_Init+0x28>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 fcd3 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fe76 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fcdd 	bl	8001946 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 fcb3 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_IncTick+0x1c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	200000c8 	.word	0x200000c8

08000fec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	@ (8000ffc <HAL_GetTick+0x10>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	200000c8 	.word	0x200000c8

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff fff0 	bl	8000fec <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffe0 	bl	8000fec <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0ed      	b.n	8001236 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fe22 	bl	8000cb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0202 	bic.w	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ffb6 	bl	8000fec <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ffb2 	bl	8000fec <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0c5      	b.n	8001236 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e5      	bne.n	8001084 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff ff90 	bl	8000fec <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ce:	e012      	b.n	80010f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d0:	f7ff ff8c 	bl	8000fec <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d90b      	bls.n	80010f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e09f      	b.n	8001236 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0e5      	beq.n	80010d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7e1b      	ldrb	r3, [r3, #24]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d108      	bne.n	800111e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e007      	b.n	800112e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e007      	b.n	8001158 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e9b      	ldrb	r3, [r3, #26]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0220 	orr.w	r2, r2, #32
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e007      	b.n	8001182 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0220 	bic.w	r2, r2, #32
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7edb      	ldrb	r3, [r3, #27]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0210 	bic.w	r2, r2, #16
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e007      	b.n	80011ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0210 	orr.w	r2, r2, #16
 80011aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7f1b      	ldrb	r3, [r3, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0208 	orr.w	r2, r2, #8
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e007      	b.n	80011d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0208 	bic.w	r2, r2, #8
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7f5b      	ldrb	r3, [r3, #29]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e007      	b.n	8001200 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	ea42 0103 	orr.w	r1, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d12e      	bne.n	80012b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800126a:	f7ff febf 	bl	8000fec <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001270:	e012      	b.n	8001298 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001272:	f7ff febb 	bl	8000fec <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b0a      	cmp	r3, #10
 800127e:	d90b      	bls.n	8001298 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2205      	movs	r2, #5
 8001290:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e012      	b.n	80012be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e5      	bne.n	8001272 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e006      	b.n	80012be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
  }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b089      	sub	sp, #36	@ 0x24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e4:	7ffb      	ldrb	r3, [r7, #31]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d003      	beq.n	80012f2 <HAL_CAN_AddTxMessage+0x2c>
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	f040 80b8 	bne.w	8001462 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10a      	bne.n	8001312 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a0 	beq.w	8001452 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	0e1b      	lsrs	r3, r3, #24
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d907      	bls.n	8001332 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e09e      	b.n	8001470 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10d      	bne.n	8001360 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	6809      	ldr	r1, [r1, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00f      	b.n	8001380 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800136a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001370:	68f9      	ldr	r1, [r7, #12]
 8001372:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001374:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3318      	adds	r3, #24
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	440b      	add	r3, r1
 800137e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6819      	ldr	r1, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3318      	adds	r3, #24
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	440b      	add	r3, r1
 8001390:	3304      	adds	r3, #4
 8001392:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	7d1b      	ldrb	r3, [r3, #20]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d111      	bne.n	80013c0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3318      	adds	r3, #24
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	6811      	ldr	r1, [r2, #0]
 80013b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3318      	adds	r3, #24
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	440b      	add	r3, r1
 80013bc:	3304      	adds	r3, #4
 80013be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3307      	adds	r3, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	061a      	lsls	r2, r3, #24
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3306      	adds	r3, #6
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3305      	adds	r3, #5
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	4313      	orrs	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	3204      	adds	r2, #4
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4610      	mov	r0, r2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	6811      	ldr	r1, [r2, #0]
 80013e8:	ea43 0200 	orr.w	r2, r3, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	440b      	add	r3, r1
 80013f2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3303      	adds	r3, #3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	061a      	lsls	r2, r3, #24
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3302      	adds	r3, #2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4313      	orrs	r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4610      	mov	r0, r2
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	ea43 0200 	orr.w	r2, r3, r0
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800142c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3318      	adds	r3, #24
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	6811      	ldr	r1, [r2, #0]
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3318      	adds	r3, #24
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e00e      	b.n	8001470 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e006      	b.n	8001470 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3724      	adds	r7, #36	@ 0x24
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d002      	beq.n	800149a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d11d      	bne.n	80014d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_GetRxMessage+0x24>
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b02      	cmp	r3, #2
 8001502:	f040 80f3 	bne.w	80016ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10e      	bne.n	800152a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0e7      	b.n	80016fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0d8      	b.n	80016fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	331b      	adds	r3, #27
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4413      	add	r3, r2
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0204 	and.w	r2, r3, #4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	331b      	adds	r3, #27
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0d5b      	lsrs	r3, r3, #21
 8001576:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e00b      	b.n	8001598 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	331b      	adds	r3, #27
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0202 	and.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	331b      	adds	r3, #27
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 020f 	and.w	r2, r3, #15
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	331b      	adds	r3, #27
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	331b      	adds	r3, #27
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0a1a      	lsrs	r2, r3, #8
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0c1a      	lsrs	r2, r3, #16
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3302      	adds	r3, #2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0e1a      	lsrs	r2, r3, #24
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3303      	adds	r3, #3
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3304      	adds	r3, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0a1a      	lsrs	r2, r3, #8
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3305      	adds	r3, #5
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0c1a      	lsrs	r2, r3, #16
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3306      	adds	r3, #6
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0e1a      	lsrs	r2, r3, #24
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3307      	adds	r3, #7
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0220 	orr.w	r2, r2, #32
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	e007      	b.n	80016e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e006      	b.n	80016fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d002      	beq.n	8001726 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d10f      	bne.n	8001746 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d106      	bne.n	800173a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e005      	b.n	8001746 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001764:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8001766:	7bbb      	ldrb	r3, [r7, #14]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d002      	beq.n	8001772 <HAL_CAN_ResetError+0x20>
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d103      	bne.n	800177a <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
 8001778:	e007      	b.n	800178a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	@ (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	@ (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	@ 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	@ 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff49 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb0 	bl	80018b4 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e169      	b.n	8001c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001974:	2201      	movs	r2, #1
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8158 	bne.w	8001c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a9a      	ldr	r2, [pc, #616]	@ (8001c00 <HAL_GPIO_Init+0x2a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d05e      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 800199c:	4a98      	ldr	r2, [pc, #608]	@ (8001c00 <HAL_GPIO_Init+0x2a0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d875      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019a2:	4a98      	ldr	r2, [pc, #608]	@ (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d058      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019a8:	4a96      	ldr	r2, [pc, #600]	@ (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d86f      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ae:	4a96      	ldr	r2, [pc, #600]	@ (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d052      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019b4:	4a94      	ldr	r2, [pc, #592]	@ (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d869      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ba:	4a94      	ldr	r2, [pc, #592]	@ (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d04c      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019c0:	4a92      	ldr	r2, [pc, #584]	@ (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d863      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019c6:	4a92      	ldr	r2, [pc, #584]	@ (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d046      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019cc:	4a90      	ldr	r2, [pc, #576]	@ (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d85d      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d82a      	bhi.n	8001a2c <HAL_GPIO_Init+0xcc>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d859      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <HAL_GPIO_Init+0x80>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a35 	.word	0x08001a35
 80019e8:	08001a47 	.word	0x08001a47
 80019ec:	08001a89 	.word	0x08001a89
 80019f0:	08001a8f 	.word	0x08001a8f
 80019f4:	08001a8f 	.word	0x08001a8f
 80019f8:	08001a8f 	.word	0x08001a8f
 80019fc:	08001a8f 	.word	0x08001a8f
 8001a00:	08001a8f 	.word	0x08001a8f
 8001a04:	08001a8f 	.word	0x08001a8f
 8001a08:	08001a8f 	.word	0x08001a8f
 8001a0c:	08001a8f 	.word	0x08001a8f
 8001a10:	08001a8f 	.word	0x08001a8f
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a8f 	.word	0x08001a8f
 8001a1c:	08001a8f 	.word	0x08001a8f
 8001a20:	08001a8f 	.word	0x08001a8f
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a51 	.word	0x08001a51
 8001a2c:	4a79      	ldr	r2, [pc, #484]	@ (8001c14 <HAL_GPIO_Init+0x2b4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a32:	e02c      	b.n	8001a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e029      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	3304      	adds	r3, #4
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e024      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e01f      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	330c      	adds	r3, #12
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e01a      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a62:	2304      	movs	r3, #4
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e013      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	611a      	str	r2, [r3, #16]
          break;
 8001a7a:	e009      	b.n	8001a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	615a      	str	r2, [r3, #20]
          break;
 8001a86:	e003      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          break;
 8001a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	@ 0xff
 8001a94:	d801      	bhi.n	8001a9a <HAL_GPIO_Init+0x13a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_Init+0x13e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	@ 0xff
 8001aa4:	d802      	bhi.n	8001aac <HAL_GPIO_Init+0x14c>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x152>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	210f      	movs	r1, #15
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80b1 	beq.w	8001c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af8:	4a48      	ldr	r2, [pc, #288]	@ (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	@ (8001c20 <HAL_GPIO_Init+0x2c0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_GPIO_Init+0x1ec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <HAL_GPIO_Init+0x2c4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1e8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3d      	ldr	r2, [pc, #244]	@ (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1e0>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5e:	492f      	ldr	r1, [pc, #188]	@ (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b78:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	492c      	ldr	r1, [pc, #176]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4928      	ldr	r1, [pc, #160]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4922      	ldr	r1, [pc, #136]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bae:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	491e      	ldr	r1, [pc, #120]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4918      	ldr	r1, [pc, #96]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4914      	ldr	r1, [pc, #80]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d021      	beq.n	8001c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	490e      	ldr	r1, [pc, #56]	@ (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e021      	b.n	8001c42 <HAL_GPIO_Init+0x2e2>
 8001bfe:	bf00      	nop
 8001c00:	10320000 	.word	0x10320000
 8001c04:	10310000 	.word	0x10310000
 8001c08:	10220000 	.word	0x10220000
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	10120000 	.word	0x10120000
 8001c14:	10110000 	.word	0x10110000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40011400 	.word	0x40011400
 8001c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4909      	ldr	r1, [pc, #36]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f ae8e 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	372c      	adds	r7, #44	@ 0x2c
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca6:	787b      	ldrb	r3, [r7, #1]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb2:	e003      	b.n	8001cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e304      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b92      	ldr	r3, [pc, #584]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
 8001d00:	4b8c      	ldr	r3, [pc, #560]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b89      	ldr	r3, [pc, #548]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x12c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e2de      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x76>
 8001d30:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a7f      	ldr	r2, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b78      	ldr	r3, [pc, #480]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xbc>
 8001d6a:	4b72      	ldr	r3, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a71      	ldr	r2, [pc, #452]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b68      	ldr	r3, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f922 	bl	8000fec <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f91e 	bl	8000fec <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e292      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe4>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f90e 	bl	8000fec <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f90a 	bl	8000fec <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e27e      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x10c>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e252      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4939      	ldr	r1, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff f8c3 	bl	8000fec <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f8bf 	bl	8000fec <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e233      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4927      	ldr	r1, [pc, #156]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8a2 	bl	8000fec <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff f89e 	bl	8000fec <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e212      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03a      	beq.n	8001f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f882 	bl	8000fec <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f87e 	bl	8000fec <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1f2      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 fbba 	bl	8002684 <RCC_Delay>
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff f868 	bl	8000fec <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f864 	bl	8000fec <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d8      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000
 8001f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b9b      	ldr	r3, [pc, #620]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e9      	bne.n	8001f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a6 	beq.w	80020a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b94      	ldr	r3, [pc, #592]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b91      	ldr	r3, [pc, #580]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a90      	ldr	r2, [pc, #576]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b8e      	ldr	r3, [pc, #568]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b8b      	ldr	r3, [pc, #556]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a87      	ldr	r2, [pc, #540]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f825 	bl	8000fec <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff f821 	bl	8000fec <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	@ 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e195      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x312>
 8001fcc:	4b78      	ldr	r3, [pc, #480]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a77      	ldr	r2, [pc, #476]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02d      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x334>
 8001fe2:	4b73      	ldr	r3, [pc, #460]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a72      	ldr	r2, [pc, #456]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b70      	ldr	r3, [pc, #448]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e01c      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x356>
 8002004:	4b6a      	ldr	r3, [pc, #424]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a69      	ldr	r2, [pc, #420]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	4b67      	ldr	r3, [pc, #412]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a66      	ldr	r2, [pc, #408]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 800201e:	4b64      	ldr	r3, [pc, #400]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a63      	ldr	r2, [pc, #396]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b61      	ldr	r3, [pc, #388]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a60      	ldr	r2, [pc, #384]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe ffd5 	bl	8000fec <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe ffd1 	bl	8000fec <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e143      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b54      	ldr	r3, [pc, #336]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCC_OscConfig+0x37e>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe ffbf 	bl	8000fec <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe ffbb 	bl	8000fec <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e12d      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b45      	ldr	r3, [pc, #276]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a44      	ldr	r2, [pc, #272]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 808c 	beq.w	80021c8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80020b0:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d10e      	bne.n	80020dc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80020be:	4b3c      	ldr	r3, [pc, #240]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80020ca:	4b39      	ldr	r3, [pc, #228]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e103      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d14e      	bne.n	8002182 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80020e4:	4b32      	ldr	r3, [pc, #200]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80020f0:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ef      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <HAL_RCC_OscConfig+0x4f0>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe ff6f 	bl	8000fec <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002112:	f7fe ff6b 	bl	8000fec <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	@ 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0df      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	491c      	ldr	r1, [pc, #112]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4918      	ldr	r1, [pc, #96]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_RCC_OscConfig+0x4f0>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe ff47 	bl	8000fec <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002162:	f7fe ff43 	bl	8000fec <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	@ 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0b7      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x49a>
 8002180:	e022      	b.n	80021c8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_RCC_OscConfig+0x4e8>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800218c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_RCC_OscConfig+0x4f0>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe ff2a 	bl	8000fec <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800219a:	e00f      	b.n	80021bc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800219c:	f7fe ff26 	bl	8000fec <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d908      	bls.n	80021bc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e09a      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80021bc:	4b4b      	ldr	r3, [pc, #300]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1e9      	bne.n	800219c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8088 	beq.w	80022e2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d068      	beq.n	80022b0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d14d      	bne.n	8002282 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <HAL_RCC_OscConfig+0x628>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fefe 	bl	8000fec <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fefa 	bl	8000fec <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e06e      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	4b39      	ldr	r3, [pc, #228]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221a:	d10f      	bne.n	800223c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 800221e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4931      	ldr	r1, [pc, #196]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 8002226:	4313      	orrs	r3, r2
 8002228:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	492d      	ldr	r1, [pc, #180]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 8002238:	4313      	orrs	r3, r2
 800223a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	430b      	orrs	r3, r1
 800224e:	4927      	ldr	r1, [pc, #156]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b26      	ldr	r3, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x628>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fec7 	bl	8000fec <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fec3 	bl	8000fec <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e037      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x59a>
 8002280:	e02f      	b.n	80022e2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x628>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe feb0 	bl	8000fec <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe feac 	bl	8000fec <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e020      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c8>
 80022ae:	e018      	b.n	80022e2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCC_OscConfig+0x624>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	42420060 	.word	0x42420060

080022f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d0      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b67      	ldr	r3, [pc, #412]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4965      	ldr	r1, [pc, #404]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800235a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d040      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e073      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4936      	ldr	r1, [pc, #216]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fe02 	bl	8000fec <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fdfe 	bl	8000fec <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e053      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d210      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4922      	ldr	r1, [pc, #136]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fd60 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08002720 	.word	0x08002720
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	b099      	sub	sp, #100	@ 0x64
 80024ce:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80024d0:	4b66      	ldr	r3, [pc, #408]	@ (800266c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d2:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	c407      	stmia	r4!, {r0, r1, r2}
 80024da:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024de:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80024e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80024ec:	2300      	movs	r3, #0
 80024ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80024f0:	2300      	movs	r3, #0
 80024f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024f4:	2300      	movs	r3, #0
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	65bb      	str	r3, [r7, #88]	@ 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002500:	2300      	movs	r3, #0
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002504:	4b5b      	ldr	r3, [pc, #364]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d002      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x52>
 8002514:	2b08      	cmp	r3, #8
 8002516:	d003      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x58>
 8002518:	e09f      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251a:	4b57      	ldr	r3, [pc, #348]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800251c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800251e:	e09f      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002522:	0c9b      	lsrs	r3, r3, #18
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	3340      	adds	r3, #64	@ 0x40
 800252a:	f107 0220 	add.w	r2, r7, #32
 800252e:	4413      	add	r3, r2
 8002530:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002534:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8084 	beq.w	800264a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002542:	4b4c      	ldr	r3, [pc, #304]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3340      	adds	r3, #64	@ 0x40
 800254c:	f107 0220 	add.w	r2, r7, #32
 8002550:	4413      	add	r3, r2
 8002552:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002556:	653b      	str	r3, [r7, #80]	@ 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002558:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d060      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002564:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3301      	adds	r3, #1
 8002570:	64bb      	str	r3, [r7, #72]	@ 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002572:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	3302      	adds	r3, #2
 800257e:	647b      	str	r3, [r7, #68]	@ 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002582:	2200      	movs	r2, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	617a      	str	r2, [r7, #20]
 8002588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258a:	2200      	movs	r2, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	61fa      	str	r2, [r7, #28]
 8002590:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002594:	4622      	mov	r2, r4
 8002596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259a:	4684      	mov	ip, r0
 800259c:	fb0c f202 	mul.w	r2, ip, r2
 80025a0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80025a4:	468c      	mov	ip, r1
 80025a6:	4618      	mov	r0, r3
 80025a8:	4621      	mov	r1, r4
 80025aa:	4603      	mov	r3, r0
 80025ac:	fb03 f30c 	mul.w	r3, r3, ip
 80025b0:	4413      	add	r3, r2
 80025b2:	4602      	mov	r2, r0
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	fba2 8901 	umull	r8, r9, r2, r1
 80025ba:	444b      	add	r3, r9
 80025bc:	4699      	mov	r9, r3
 80025be:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80025c0:	fb03 f209 	mul.w	r2, r3, r9
 80025c4:	2300      	movs	r3, #0
 80025c6:	fb03 f308 	mul.w	r3, r3, r8
 80025ca:	4413      	add	r3, r2
 80025cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80025ce:	fba8 ab02 	umull	sl, fp, r8, r2
 80025d2:	445b      	add	r3, fp
 80025d4:	469b      	mov	fp, r3
 80025d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d8:	2200      	movs	r2, #0
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	60fa      	str	r2, [r7, #12]
 80025de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e0:	2200      	movs	r2, #0
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025ea:	4622      	mov	r2, r4
 80025ec:	e9d7 8900 	ldrd	r8, r9, [r7]
 80025f0:	4641      	mov	r1, r8
 80025f2:	fb01 f202 	mul.w	r2, r1, r2
 80025f6:	46cc      	mov	ip, r9
 80025f8:	4618      	mov	r0, r3
 80025fa:	4621      	mov	r1, r4
 80025fc:	4603      	mov	r3, r0
 80025fe:	fb03 f30c 	mul.w	r3, r3, ip
 8002602:	4413      	add	r3, r2
 8002604:	4602      	mov	r2, r0
 8002606:	4641      	mov	r1, r8
 8002608:	fba2 5601 	umull	r5, r6, r2, r1
 800260c:	4433      	add	r3, r6
 800260e:	461e      	mov	r6, r3
 8002610:	462a      	mov	r2, r5
 8002612:	4633      	mov	r3, r6
 8002614:	4650      	mov	r0, sl
 8002616:	4659      	mov	r1, fp
 8002618:	f7fd fe04 	bl	8000224 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4613      	mov	r3, r2
 8002622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002624:	e007      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002628:	4a13      	ldr	r2, [pc, #76]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800262a:	fb03 f202 	mul.w	r2, r3, r2
 800262e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002636:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800263a:	461a      	mov	r2, r3
 800263c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8002642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002648:	e004      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800264a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800264c:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <HAL_RCC_GetSysClockFreq+0x1b4>)
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
      sysclockfreq = pllclk;
 8002654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002656:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8002658:	e002      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800265c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800265e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
}
 8002662:	4618      	mov	r0, r3
 8002664:	3764      	adds	r7, #100	@ 0x64
 8002666:	46bd      	mov	sp, r7
 8002668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800266c:	080026f8 	.word	0x080026f8
 8002670:	08002708 	.word	0x08002708
 8002674:	40021000 	.word	0x40021000
 8002678:	017d7840 	.word	0x017d7840
 800267c:	003d0900 	.word	0x003d0900
 8002680:	007a1200 	.word	0x007a1200

08002684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <RCC_Delay+0x34>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <RCC_Delay+0x38>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0a5b      	lsrs	r3, r3, #9
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a0:	bf00      	nop
  }
  while (Delay --);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	60fa      	str	r2, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f9      	bne.n	80026a0 <RCC_Delay+0x1c>
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	20000000 	.word	0x20000000
 80026bc:	10624dd3 	.word	0x10624dd3

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <_init>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr

080026dc <_fini>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	bf00      	nop
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr
